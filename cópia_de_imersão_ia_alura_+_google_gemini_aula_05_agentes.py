# -*- coding: utf-8 -*-
"""C√≥pia de Imers√£o IA Alura + Google Gemini - Aula 05 - Agentes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gFbDmjGTygrBKdgZzTe3fPBfEpRI1I2K
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip -q install google-genai

# Configura a API Key do Google Gemini

import os
from google.colab import userdata

os.environ["GOOGLE_API_KEY"] = userdata.get('GOOGLE_API_KEY')

# Configura o cliente da SDK do Gemini

from google import genai

client = genai.Client()

MODEL_ID = "gemini-2.0-flash"

# Pergunta ao Gemini uma informa√ß√£o mais recente que seu conhecimento

from IPython.display import HTML, Markdown

# Perguntar pro modelo quando √© a pr√≥xima imers√£o de IA ###############################################
resposta = client.models.generate_content(
    model = MODEL_ID,
    contents ='Quando √© a pr√≥xima imers√£o de IA da Alura?',
)

# Exibe a resposta na tela
display(Markdown(f"Resposta:\n {resposta.text}"))

# Pergunta ao Gemini uma informa√ß√£o utilizando a busca do Google como contexto

response = client.models.generate_content(
    model=MODEL_ID,
    contents='Quando √© a pr√≥xima Imers√£o IA com Google Gemini da Alura?',
    config={"tools": [{"google_search": {}}]}
)

# Exibe a resposta na tela
display(Markdown(f"Resposta:\n {response.text}"))
# Exibe a resposta na tela
display(Markdown(f"Resposta:\n {response.text}"))

# Exibe a busca
print(f"Busca realizada: {response.candidates[0].grounding_metadata.web_search_queries}")
# Exibe as URLs nas quais ele se baseou
print(f"P√°ginas utilizadas na resposta: {', '.join([site.web.title for site in response.candidates[0].grounding_metadata.grounding_chunks])}")
print()
display(HTML(response.candidates[0].grounding_metadata.search_entry_point.rendered_content))

# Instalar Framework ADK de agentes do Google ################################################
!pip install -q google-adk

from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search
from google.genai import types  # Para criar conte√∫dos (Content e Part)
from datetime import date
import textwrap # Para formatar melhor a sa√≠da de texto
from IPython.display import display, Markdown # Para exibir texto formatado no Colab
import requests # Para fazer requisi√ß√µes HTTP
import warnings

warnings.filterwarnings("ignore")

# Fun√ß√£o auxiliar que envia uma mensagem para um agente via Runner e retorna a resposta final
def call_agent(agent: Agent, message_text: str) -> str:
    # Cria um servi√ßo de sess√£o em mem√≥ria
    session_service = InMemorySessionService()
    # Cria uma nova sess√£o (voc√™ pode personalizar os IDs conforme necess√°rio)
    session = session_service.create_session(app_name=agent.name, user_id="user1", session_id="session1")
    # Cria um Runner para o agente
    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
    # Cria o conte√∫do da mensagem de entrada
    content = types.Content(role="user", parts=[types.Part(text=message_text)])

    final_response = ""
    # Itera assincronamente pelos eventos retornados durante a execu√ß√£o do agente
    for event in runner.run(user_id="user1", session_id="session1", new_message=content):
        if event.is_final_response():
          for part in event.content.parts:
            if part.text is not None:
              final_response += part.text
              final_response += "\n"
    return final_response

# Fun√ß√£o auxiliar para exibir texto formatado em Markdown no Colab
def to_markdown(text):
  text = text.replace('‚Ä¢', '  *')
  return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))

##########################################
# --- Agente 1: Buscador de Not√≠cias --- #
##########################################
def agente_extrator(topico, data_de_hoje):
    extrator = Agent(
        name="agente_extrator",
        model="gemini-2.5-pro-preview-03-25",
        description="Agente que extrai os dados dos 3 pdfs inseridos"
        tools=
        instruction="""
            Voc√™ √© um especialista em not√≠cias.

################################################
# --- Agente 2: Planejador de posts --- #
################################################
def agente_planejador(topico, lancamentos_buscados):
    planejador = Agent(
        name="agente_planejador",
        model="gemini-2.0-flash",
        # Inserir as instru√ß√µes do Agente Planejador #################################################
        instruction="""
        """,
        description="Agente que planeja posts",
        tools=[google_search]
    )

    entrada_do_agente_planejador = f"T√≥pico:{topico}\nLan√ßamentos buscados: {lancamentos_buscados}"
    # Executa o agente
    plano_do_post = call_agent(planejador, entrada_do_agente_planejador)
    return plano_do_post

######################################
# --- Agente 3: Redator do Post --- #
######################################
def agente_redator(topico, plano_de_post):
    redator = Agent(
        name="agente_redator",
        model="gemini-2.5-pro-preview-03-25",
        instruction="""
            Voc√™ √© um Redator Criativo especializado em criar posts virais para redes sociais.
            Voc√™ escreve posts para a empresa Alura, a maior escola online de tecnologia do Brasil.
            Utilize o tema fornecido no plano de post e os pontos mais relevantes fornecidos e, com base nisso,
            escreva um rascunho de post para Instagram sobre o tema indicado.
            O post deve ser engajador, informativo, com linguagem simples e incluir 2 a 4 hashtags no final.
            """,
        description="Agente redator de posts engajadores para Instagram"
    )
    entrada_do_agente_redator = f"T√≥pico: {topico}\nPlano de post: {plano_de_post}"
    # Executa o agente
    rascunho = call_agent(redator, entrada_do_agente_redator)
    return rascunho

##########################################
# --- Agente 4: Revisor de Qualidade --- #
##########################################
def agente_revisor(topico, rascunho_gerado):
    revisor = Agent(
        name="agente_revisor",
        model="gemini-2.5-pro-preview-03-25",
        instruction="""
            Voc√™ √© um Editor e Revisor de Conte√∫do meticuloso, especializado em posts para redes sociais, com foco no Instagram.
            Por ter um p√∫blico jovem, entre 18 e 30 anos, use um tom de escrita adequado.
            Revise o rascunho de post de Instagram abaixo sobre o t√≥pico indicado, verificando clareza, concis√£o, corre√ß√£o e tom.
            Se o rascunho estiver bom, responda apenas 'O rascunho est√° √≥timo e pronto para publicar!'.
            Caso haja problemas, aponte-os e sugira melhorias.
            """,
        description="Agente revisor de post para redes sociais."
    )
    entrada_do_agente_revisor = f"T√≥pico: {topico}\nRascunho: {rascunho_gerado}"
    # Executa o agente
    texto_revisado = call_agent(revisor, entrada_do_agente_revisor)
    return texto_revisado

data_de_hoje = date.today().strftime("%d/%m/%Y")

print("üöÄ Iniciando o Sistema de Cria√ß√£o de Posts para Instagram com 4 Agentes üöÄ")

# --- Obter o T√≥pico do Usu√°rio ---
topico = input("‚ùì Por favor, digite o T√ìPICO sobre o qual voc√™ quer criar o post de tend√™ncias: ")

# Inserir l√≥gica do sistema de agentes ################################################